<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Version" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<!--Jenkins sets BUILD_NUMBER -->
		<Build>$(BUILD_NUMBER)</Build>
		<Build Condition="$(Build) == ''">0</Build><!-- set to 0 outside of CI -->
		<Revision>0</Revision>
		<Configuration Condition="$(Configuration) == ''">Unspecified</Configuration>
		<MSBuildMercurialTasksPath>$(MsBuildThisFileDirectory)</MSBuildMercurialTasksPath>
		<AsmInfoPath>$(MSBuildThisFileDirectory)\SharedAssemblyInfo.cs</AsmInfoPath>
	</PropertyGroup>  
	
	<Import Project="$(MSBuildMercurialTasksPath)\MSBuild.Mercurial.tasks"/>

	<!-- borrowed / modified from from https://gist.github.com/966148 -->
	<UsingTask TaskName="GitVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
		<ParameterGroup>
		  <LocalPath ParameterType="System.String" />
		  <Path ParameterType="System.String" />
		  <Changeset ParameterType="System.String" Output="true" />
		</ParameterGroup>
		<Task>
		  <Using Namespace="System"/>
		  <Using Namespace="System.IO"/>
		  <Using Namespace="System.Diagnostics"/>
		  <Code Type="Fragment" Language="cs">
			<![CDATA[
			  LocalPath = LocalPath ?? ".";
			  
			  Log.LogMessage(MessageImportance.Low, "LocalPath is {0}", LocalPath);
			  var gitPath = File.Exists(@"c:\program files (x86)\git\bin\git.exe") ?
			  	@"c:\program files (x86)\git\bin\git.exe" : @"c:\program files\git\bin\git.exe";

			  var psi = new ProcessStartInfo(gitPath, "log -1 --pretty=format:%h") {
			  	  WindowStyle = ProcessWindowStyle.Hidden,
				  UseShellExecute = false, 
				  ErrorDialog = false, 
				  CreateNoWindow = false, 
				  WorkingDirectory = LocalPath,
				  RedirectStandardOutput = true,
				  RedirectStandardError = true
			  };

			  using (var p = Process.Start(psi)) {
				p.WaitForExit();
				if (p.ExitCode != 0) {
				  using (var standardError = p.StandardError) {
					Log.LogError(standardError.ReadToEnd());
				  }
				  return false;
				}

				using (var standardOutput = p.StandardOutput) {
				  Changeset = standardOutput.ReadToEnd();
				}
			  }
			]]>
		  </Code>
		</Task>
	</UsingTask>


	<Target Name="Version" Returns="$(VersionNumber);$(Changeset);$(BuildVersion);$(RevisionVersion)" BeforeTargets="Build">
		<ItemGroup>
			<Nodes Include="MajorVersion;MinorVersion;VersionCompany;VersionCompanyUrl;BUILD_NUMBER;AssemblyFileVersionLayout;AssemblyInformationalVersionLayout" />
		</ItemGroup>

		<XmlPeek
			XmlInputPath="$(SolutionDir)\version.props"
			Query="/VersioningScheme/%(Nodes.Identity)/text()">
			<Output TaskParameter="Result" ItemName="%(Nodes.Identity)" />
		</XmlPeek>
		
		<PropertyGroup>
			<YearMonth>$([System.DateTime]::UtcNow.ToString(`yyMM`))</YearMonth>
			<DayNumber>$([System.DateTime]::UtcNow.ToString(`dd`))</DayNumber>
			<Year>$([System.DateTime]::UtcNow.ToString(`yyyy`))</Year>

			<!-- flatten the user specified lists to strings -->
			<MajorVersion>@(MajorVersion)</MajorVersion>
			<MinorVersion>@(MinorVersion)</MinorVersion>
			<VersionCompany>@(VersionCompany)</VersionCompany>
			<VersionCompanyUrl>@(VersionCompanyUrl)</VersionCompanyUrl>
			<!-- this value is optional, but has to be set to something so we don't chuck an error below -->
			<BUILD_NUMBER Condition="@(BUILD_NUMBER) != ''">@(BUILD_NUMBER)</BUILD_NUMBER>
			<BUILD_NUMBER Condition="@(BUILD_NUMBER) == ''">$(Build)</BUILD_NUMBER>
			
			<!-- this will end up being, in this order
				- Override BUILD_NUMBER specified in version.props if present
				- BUILD_NUMBER environment variable as specified by a build server like Jenkins
				- 0 if not specified
			 -->
			<Build>$(BUILD_NUMBER)</Build>
			<!-- ensure we use only up to the last 3 characters of the build_number so we don't overrun 65536 -->
			<Build Condition="$(Build.Length) > 3">$(Build.Substring($([MSBuild]::Subtract($(Build.Length), 3))))</Build>

			<!-- each aspect of version is limited to 65536, so we have to be crafty with how we cook this up -->
			<BuildVersion>$(YearMonth)</BuildVersion>
			<RevisionVersion>$(DayNumber)$(Build)</RevisionVersion>
			<VersionNumber>$(MajorVersion).$(MinorVersion).$(BuildVersion).$(RevisionVersion)</VersionNumber>

			<AssemblyFileVersionLayout Condition="@(AssemblyFileVersionLayout) != ''">@(AssemblyFileVersionLayout)</AssemblyFileVersionLayout>
			<!-- defaults when user has not specified -->
			<AssemblyFileVersionLayout Condition="@(AssemblyFileVersionLayout) == ''">$(VersionNumber)</AssemblyFileVersionLayout>

			<!-- this is a hideous hack, but can't find another way to just take a list of properties / evaluations to search replace and clean this up -->
			<AssemblyFileVersionLayout>$(AssemblyFileVersionLayout.Replace("%24(MajorVersion)","$(MajorVersion)").Replace("%24(MinorVersion)","$(MinorVersion)").Replace("%24(YearMonth)","$(YearMonth)").Replace("%24(DayNumber)","$(DayNumber)").Replace("%24(Year)","$(Year)").Replace("%24(BuildVersion)","$(BuildVersion)").Replace("%24(RevisionVersion)","$(RevisionVersion)").Replace("%24(VersionNumber)","$(VersionNumber)").Replace("%24(BUILD_NUMBER)","$(BUILD_NUMBER)").Replace("%24(Build)","$(Build)").Trim())
			</AssemblyFileVersionLayout>

			<AssemblyInformationalVersionLayout Condition="@(AssemblyInformationalVersionLayout) != ''">@(AssemblyInformationalVersionLayout)</AssemblyInformationalVersionLayout>
			<!-- defaults when user has not specified -->
			<AssemblyInformationalVersionLayout Condition="@(AssemblyInformationalVersionLayout) == ''">$(VersionNumber)</AssemblyInformationalVersionLayout>

			<!-- see above -->
			<AssemblyInformationalVersionLayout>$(AssemblyInformationalVersionLayout.Replace("%24(MajorVersion)","$(MajorVersion)").Replace("%24(MinorVersion)","$(MinorVersion)").Replace("%24(YearMonth)","$(YearMonth)").Replace("%24(DayNumber)","$(DayNumber)").Replace("%24(Year)","$(Year)").Replace("%24(BuildVersion)","$(BuildVersion)").Replace("%24(RevisionVersion)","$(RevisionVersion)").Replace("%24(VersionNumber)","$(VersionNumber)").Replace("%24(BUILD_NUMBER)","$(BUILD_NUMBER)").Replace("%24(Build)","$(Build)").Trim())
			</AssemblyInformationalVersionLayout>
		</PropertyGroup>

		<Error Condition="$(%(Nodes.Identity)) == ''" Text="%(Nodes.Identity) must be entered into the version.props file" />
		<Message Text="Calculating Version Information..."/>		

		<HgVersion LocalPath="$(MSBuildThisFileDirectory)\..\.." Timeout="25000" ContinueOnError="true">
			<Output TaskParameter="Revision" PropertyName="Revision" />
			<Output TaskParameter="Changeset" PropertyName="Changeset" />
		</HgVersion>

		<GitVersion LocalPath="" Condition="$(Changeset) == ''" ContinueOnError="true">
			<Output TaskParameter="Changeset" PropertyName="Changeset" />
		</GitVersion>
						
		<Message Text="Last revision from DVCS: $(Revision) $(Changeset) - calculated version $(VersionNumber)"/>    

		<ItemGroup>
			<Lines Include="//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" />
			<Lines Include="//DANGER WILL ROBINSON - TOOL GENERATED FILE - DO NOT MODIFY THIS FILE BY HAND!" />
			<Lines Include="//USE THE SOLUTIONS VERSION.PROPS TO TWEAK MINOR / MAJOR VERSIONS" />
			<Lines Include="//~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=" />
			<Lines Include="using System%3B" />
			<Lines Include="using System.Reflection%3B" />
			<Lines Include="using System.Resources%3B" />
			<Lines Include="[assembly: AssemblyCompany(&quot;$(VersionCompany) $(VersionCompanyUrl)&quot;)]" />
			<Lines Include="[assembly: AssemblyCopyright(&quot;Copyright &#169; $(Year) $(VersionCompany)&quot;)]" />
			<Lines Include="[assembly: AssemblyConfiguration(&quot;$(Configuration) - $(Changeset)&quot;)]" />
			<Lines Include="[assembly: AssemblyVersion(&quot;$(VersionNumber)&quot;)]" />
			<Lines Include="[assembly: AssemblyFileVersion(&quot;$(AssemblyFileVersionLayout.Trim())&quot;)]" />
			<Lines Include="[assembly: AssemblyInformationalVersion(&quot;$(AssemblyInformationalVersionLayout.Trim())&quot;)]" />
		</ItemGroup>

		<!-- TODO: find a way to include other stuff in version.props for the shared asm info
		[assembly: AssemblyTrademark("" "")]
		[assembly: CLSCompliant(true)]
		[assembly: NeutralResourcesLanguage("en")]
		[assembly: CodeLanguage("CS")]
		-->
		<WriteLinesToFile File="$(AsmInfoPath)" Lines="@(Lines)" Overwrite="true" />
	</Target> 
</Project>